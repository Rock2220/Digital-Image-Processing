# -*- coding: utf-8 -*-
"""DIP_Hist_Eq.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14eik3b_wwzPDcss855BH9EjnD7GHYtZ9
"""

# Histogram Equalization

# Importing Libraries
import cv2 as cv
import numpy as np 
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow 
  
# Read an image using imread 
img = cv.imread("/media/cameraman.png", 0) 
  
# Creating a Histograms Equalization using cv2.equalizeHist() 
equ = cv.equalizeHist(img) 
  
# Stacking images side-by-side 
res = np.hstack((img, equ)) 
  
# Show image input vs output 
# cv.imshow("cameraman.png", res) 
# cv.waitKey(0) 

# Show image input vs output. Google Colab code :  
cv2_imshow(res) 
cv.imwrite("/media/res.png", res)

# Histogram Calculation in Numpy
hist, bins = np.histogram(img.ravel(), 256, [0,256])

# Histogram Calculation in OpenCV (Find frequency of pixels in range 0-255)
# [img] : images : it is the source image of type uint8 or float32.
# [0]   : channels,  It is the index of channel for which we calculate histogram. [0] Grayscale Image/Blue, [1] Green, [2] Red
# None  : mask  : mask image. To find histogram of full image, it is given as "None".... 
# But if you want to find histogram of particular region of image, you have to create a mask image for that and give it as mask.
# [256] : histSize : this represents our BIN count. Need to be given in square brackets. For full scale, we pass [256].
# [0, 256]
histr = cv.calcHist([img], [0], None, [256], [0, 256]))

# hist is a 256x1 array, each value corresponds to number of pixels in that image with its corresponding pixel value.

# Plotting Histogram 
plt.hist(img.ravel(), 256, [0, 256])
plt.show()

# Plotting graph of an image 
plt.plot(histr)
plt.show()
print(histr)